# -*- cmake -*-

#
# USE_OPENCL
# USE_CUDA
#

# Check if cmake has the required version
CMAKE_MINIMUM_REQUIRED(VERSION 3.6 FATAL_ERROR)
CMAKE_POLICY(SET CMP0065 NEW)


# Set name of our project.
PROJECT(HFMonitor)

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

EXECUTE_PROCESS(
  COMMAND "${CMAKE_HOME_DIRECTORY}/get_git_version_string.sh" "${CMAKE_HOME_DIRECTORY}/"
  OUTPUT_VARIABLE SVN_VERSION_STRING
  OUTPUT_STRIP_TRAILING_WHITESPACE)
MESSAGE("VERSION=${SVN_VERSION_STRING}")

FIND_PROGRAM(LSB_RELEASE lsb_release)
EXECUTE_PROCESS(COMMAND ${LSB_RELEASE} -is
  OUTPUT_VARIABLE LSB_RELEASE_ID_SHORT
  OUTPUT_STRIP_TRAILING_WHITESPACE
  )

MESSAGE("LSB_RELEASE=${LSB_RELEASE_ID_SHORT}")

SET(CMAKE_BUILD_TYPE Release)
#SET(CMAKE_BUILD_TYPE Debug)
#SET(CMAKE_CXX_FLAGS         "-Wall -DBOOST_DATE_TIME_POSIX_TIME_STD_CONFIG -DSVN_VERSION_STRING=\"${SVN_VERSION_STRING}\"")

MESSAGE("CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -DSVN_VERSION_STRING='\"${SVN_VERSION_STRING}\"'")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g")
SET(CMAKE_VERBOSE_MAKEFILE OFF)

IF(LSB_RELEASE_ID_SHORT STREQUAL "Scientific" OR APPLE)
  SET(SOFTWARE_MAKE_ARGS)
  IF (USE_OPENCL)
    LIST(APPEND SOFTWARE_MAKE_ARGS "USE_OPENCL=1")
  ENDIF (USE_OPENCL)
  IF (APPLE)
    LIST(APPEND SOFTWARE_MAKE_ARGS "APPLE=1")
  ENDIF (APPLE)
  MESSAGE("SOFTWARE_MAKE_ARGS=${SOFTWARE_MAKE_ARGS}")

  EXECUTE_PROCESS(
    COMMAND "make" ${SOFTWARE_MAKE_ARGS}
    WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}/software)

  SET(BOOSTROOT ${CMAKE_HOME_DIRECTORY}/software/install)
  SET(Boost_NO_SYSTEM_PATHS ON)

  # where to look first for cmake modules
  SET(CMAKE_MODULE_PATH   "${CMAKE_HOME_DIRECTORY}/CMake/modules;${CMAKE_HOME_DIRECTORY}/software/install/lib/cmake/volk")
  SET(CMAKE_PREFIX_PATH   "${CMAKE_HOME_DIRECTORY}/software/install/")
  SET(CMAKE_INSTALL_PREFIX ${CMAKE_HOME_DIRECTORY}/bin)

  SET(ENV{VOLK_DIR} "${CMAKE_HOME_DIRECTORY}/software/install/")

  SET(PYTHON_EXECUTABLE /opt/rh/python27/root/usr/bin/python)
ENDIF()

IF(LSB_RELEASE_ID_SHORT STREQUAL "Gentoo")
  SET(PYTHON_EXECUTABLE /usr/bin/python)
ENDIF()


EXECUTE_PROCESS(
  COMMAND "${CMAKE_HOME_DIRECTORY}/get_simd_compiler_flags.sh"
  OUTPUT_VARIABLE EXTRA_CFLAGS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}  ${EXTRA_CFLAGS}")

# List of libraries
SET(_libs)

SET(Boost_USE_MULTITHREADED ON)
FIND_PACKAGE(Boost 1.62 REQUIRED COMPONENTS python program_options thread coroutine iostreams locale unit_test_framework system filesystem regex date_time log)
MESSAGE("Boost_LIBRARIES = ${Boost_LIBRARIES}")
MESSAGE("Boost_INCLUDE_DIRS = ${Boost_INCLUDE_DIRS}")
LIST(APPEND   _libs ${Boost_LIBRARIES})
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DBOOST_LOG_DYN_LINK")

# Setup FFTW3
FIND_PACKAGE(FFTW3 REQUIRED COMPONENTS single double threads)
LIST(APPEND   _libs ${FFTW3_LIBRARIES})
INCLUDE_DIRECTORIES(${FFTW3_INCLUDE_DIR})

# find python  libraries
FIND_PACKAGE(PythonInterp REQUIRED)
FIND_PACKAGE(PythonLibs   REQUIRED)
LIST(APPEND   _libs ${PYTHON_LIBRARIES})
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIRS})

# Setup libusb-1.0
FIND_PACKAGE(libusb-1.0 REQUIRED)
LIST(APPEND   _libs ${libusb-1.0_LIBRARY})
INCLUDE_DIRECTORIES(${libusb-1.0_INCLUDE_DIR})

# Setup portaudio
FIND_PACKAGE(Portaudio REQUIRED)
LIST(APPEND _libs ${portaudio_LIBRARY})

#Setup OpenCL
IF (USE_OPENCL)
  FIND_PACKAGE(OpenCL REQUIRED)
  LIST(APPEND _libs ${OPENCL_LIBRARIES})
  INCLUDE_DIRECTORIES(${OPENCL_INCLUDE_DIRS})
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENCL")
ENDIF (USE_OPENCL)

# Setup FLTK
SET(FLTK_PATH "${CMAKE_HOME_DIRECTORY}/software/install/bin")
FIND_PACKAGE(FLTK REQUIRED)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I${FLTK_INCLUCDE_DIR}")
IF (APPLE)
  SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS}  ${FLTK_LDFLAGS}")
ELSE (APPE)
  LIST(APPEND _libs ${FLTK_LIBRARIES})
ENDIF (APPLE)


FIND_PACKAGE(BZip2 REQUIRED)
#  BZIP2_NEED_PREFIX - this is set if the functions are prefixed with BZ2_
LIST(APPEND   _libs ${BZIP2_LIBRARIES})
INCLUDE_DIRECTORIES(${BZIP2_INCLUDE_DIR})

FIND_PACKAGE(Sqlite3 REQUIRED)
LIST(APPEND   _libs ${SQLITE3_LIBRARIES})
INCLUDE_DIRECTORIES(${SQLITE3_INCLUDE_DIR})

# Setup CUDA (optional)
IF (USE_CUDA)
  SET(CUDA_TOOLKIT_ROOT_DIR /usr/local/cuda-6.5/)
  FIND_PACKAGE(CUDA)
  IF(CUDA_FOUND)
    LIST(APPEND _libs ${CUDA_LIBRARIES})
    LIST(APPEND _libs ${CUDA_CUFFT_LIBRARIES})
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_CUDA")
    INCLUDE_DIRECTORIES(
      ${CUDA_INCLUDE_DIRS}
      ${CUDA_TOOLKIT_ROOT_DIR}/samples/common/inc
      )
  ENDIF(CUDA_FOUND)
ENDIF (USE_CUDA)

# volk
FIND_PACKAGE(Volk REQUIRED)
LIST(APPEND   _libs ${VOLK_LIBRARIES})
INCLUDE_DIRECTORIES(${VOLK_INCLUDE_DIRS})

# Setup clFFT
SET(CLFFT_ROOT "${CMAKE_HOME_DIRECTORY}/software/install/")
FIND_PACKAGE(clFFT)
IF(CLFFT_FOUND)
  LIST(APPEND   _libs ${CLFFT_LIBRARIES})
  INCLUDE_DIRECTORIES(${CLFFT_INCLUDE_DIRS})
  IF(APPLE)
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -framework OpenCL")
    #  ELSE(APPLE)
    #    LIST(APPEND _libs OpenCL)
  ENDIF(APPLE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_CLFFT")
ENDIF(CLFFT_FOUND)

# used by cuda_mutex
IF (NOT APPLE)
   LIST(APPEND _libs "-lrt -lpthread -ldl -lutil -lXrender -lXcursor -lXfixes -lXext -lXft -lfontconfig -lXinerama")
ENDIF (NOT APPLE)

MESSAGE("CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")

INCLUDE_DIRECTORIES("./include")

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(test)
